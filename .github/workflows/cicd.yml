name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction
    
    - name: Lint with black and isort
      run: |
        cd backend
        poetry run black . --check
        poetry run isort . --check-only
    
    - name: Test with pytest
      run: |
        cd backend
        poetry run pytest
      env:
        DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: "test_secret_key"
        ENVIRONMENT: "test"
    
  docker-build-and-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and test Docker image
      run: |
        cd backend
        docker build -t backend-app:test .
        
        # Create a test network
        docker network create test-network
        
        # Run a Postgres container for testing
        docker run -d \
          --name postgres-test \
          --network test-network \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=test_db \
          postgres:15
        
        # Run the application container with test environment
        docker run -d \
          --name backend-test \
          --network test-network \
          -e DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres-test:5432/test_db \
          -e SECRET_KEY=test_secret_key \
          -e ENVIRONMENT=test \
          backend-app:test
        
        # Wait for containers to be ready
        sleep 10
        
        # Check if the container is running
        if [ "$(docker inspect -f {{.State.Running}} backend-test)" = "true" ]; then
          echo "Docker container is running successfully"
        else
          echo "Docker container failed to start"
          docker logs backend-test
          exit 1
        fi
        
        # Clean up
        docker stop backend-test postgres-test
        docker rm backend-test postgres-test
        docker network rm test-network
  
  build:
    needs: [test, docker-build-and-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        # Replace with your own registry credentials or use GitHub secrets
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: |
          yourusername/backend-app:latest
          yourusername/backend-app:${{ github.sha }}
    
    # In a real-world scenario, you might want to add deployment steps here
    # For example, deploying to a cloud provider or container registry
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction --no-dev
    
    - name: Build package
      run: |
        cd backend
        poetry build 