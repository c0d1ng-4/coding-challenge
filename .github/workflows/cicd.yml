name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction
    
    - name: Test with pytest
      run: |
        cd backend
        poetry run pytest
      env:
        DATABASE_URL: postgresql+asyncpg://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ENVIRONMENT: "test"
    
  docker-build-and-test:
    runs-on: ubuntu-latest
    needs: test
    environment: dev
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and test Docker image
      run: |
        # Clear any existing containers and networks
        docker system prune -f
        
        cd backend
        docker build -t backend-app:test .
        
        # Create a test network
        docker network create test-network
        
        # Use environment secrets for database credentials
        docker run -d \
          --name postgres-test \
          --network test-network \
          -e POSTGRES_USER=${{ secrets.DB_USER }} \
          -e POSTGRES_PASSWORD=${{ secrets.DB_PASS }} \
          -e POSTGRES_DB=${{ secrets.DB_NAME }} \
          postgres:15
        
        # Check if postgres is running
        docker ps
        echo "Waiting for postgres to be ready..."
        sleep 15
        
        # Run the application container with test environment
        docker run -d \
          --name backend-test \
          --network test-network \
          -e DATABASE_URL=postgresql+asyncpg://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@postgres-test:5432/${{ secrets.DB_NAME }} \
          -e SECRET_KEY=${{ secrets.SECRET_KEY }} \
          -e ENVIRONMENT=test \
          backend-app:test
        
        # Wait for containers to be ready
        sleep 10
        
        # Check if the container is running
        if [ "$(docker inspect -f {{.State.Running}} backend-test)" = "true" ]; then
          echo "Docker container is running successfully"
        else
          echo "Docker container failed to start"
          docker logs backend-test
          exit 1
        fi
        
        # Clean up
        docker stop backend-test postgres-test
        docker rm backend-test postgres-test
        docker network rm test-network
  
  build:
    needs: [test, docker-build-and-test]
    runs-on: ubuntu-latest
    environment: dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image locally (without push)
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: false
        load: true
        tags: backend-app:latest
    
    - name: Verify Docker image
      run: |
        docker image ls
        echo "Docker image built successfully"
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction --no-dev
    
    - name: Build package
      run: |
        cd backend
        poetry build 