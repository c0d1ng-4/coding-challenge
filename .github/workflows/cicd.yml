name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: dev
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.DB_USER }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASS }}
          POSTGRES_DB: ${{ secrets.DB_NAME }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies
      run: |
        cd backend
        poetry install --no-interaction
    
    - name: Test with pytest
      run: |
        cd backend
        poetry run pytest
      env:
        DATABASE_URL: postgresql+asyncpg://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@${{ secrets.DB_HOST }}:5432/${{ secrets.DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        ENVIRONMENT: "test"
  
  deploy-infrastructure:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: dev
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Pulumi
      uses: pulumi/setup-pulumi@v2
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.7.1
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Install dependencies with Poetry
      run: |
        cd infrastructure
        poetry install
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update Pulumi Stack
      run: |
        cd infrastructure
        pulumi stack select dev
        pulumi config set --secret db_user ${{ secrets.DB_USER }}
        pulumi config set --secret db_password ${{ secrets.DB_PASS }}
        pulumi config set db_host ${{ secrets.DB_HOST }}
        pulumi config set db_name ${{ secrets.DB_NAME }}
        poetry run pulumi up --yes
        # Extract the backend URL from Pulumi outputs
        BACKEND_URL=$(poetry run pulumi stack output backend_url)
        echo "BACKEND_URL=${BACKEND_URL}" >> $GITHUB_ENV
      env:
        PULUMI_ACCESS_TOKEN: ${{ secrets.PULUMI_ACCESS_TOKEN }}
    
  deploy-frontend:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        cd frontend
        yarn install
    
    - name: Build frontend
      run: |
        cd frontend
        echo "NEXT_PUBLIC_API_BASE_URL=${{ env.BACKEND_URL }}" > .env.production
        yarn build
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v20
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        vercel-args: '--prod'